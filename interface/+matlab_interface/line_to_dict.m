function cpar = line_to_dict(line)
    % Convert a row of a table (line) into a structured dictionary (cpar).
    % Usage: cpar = line_to_dict(all_data(1, :));

    % Parse species
    species = strsplit(string(line.species), ';');
    species = species(~cellfun('isempty', species)); % Remove empty entries

    % Parse fractions
    fractions = strsplit(string(line.fractions), ';');
    fractions = cellfun(@str2double, fractions(~cellfun('isempty', fractions))); % Convert to numeric

    % Parse excitation parameters
    excitation_params = strsplit(string(line.excitation_params), ';');
    excitation_params = cellfun(@str2double, excitation_params(~cellfun('isempty', excitation_params))); % Convert to numeric

    % Create the structured dictionary
    cpar = struct(...
        'ID', double(line.ID), ...
        'mechanism', string(line.mechanism), ...
        'R_E', double(line.R_E), ...
        'species', {species}, ...
        'fractions', fractions, ...
        'P_amb', double(line.P_amb), ...
        'T_inf', double(line.T_inf), ...
        'alfa_M', double(line.alfa_M), ...
        'P_v', double(line.P_v), ...
        'mu_L', double(line.mu_L), ...
        'rho_L', double(line.rho_L), ...
        'c_L', double(line.c_L), ...
        'surfactant', double(line.surfactant), ...
        'enable_heat_transfer', line.enable_heat_transfer == "true", ...
        'enable_evaporation', line.enable_evaporation == "true", ...
        'enable_reactions', line.enable_reactions == "true", ...
        'enable_dissipated_energy', line.enable_dissipated_energy == "true", ...
        'target_specie', string(line.target_specie), ...
        'excitation_params', excitation_params, ...
        'excitation_type', string(line.excitation_type) ...
    );
end