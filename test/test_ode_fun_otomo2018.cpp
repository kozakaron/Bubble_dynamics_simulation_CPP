#ifdef TEST
#ifndef TEST_ODE_FUN_H
#define TEST_ODE_FUN_H
#include <cfloat>

#include "common.h"
#include "parameters.h"
#include "control_parameters.h"
#include "ode_fun.h"
#include "test.h"
#include "test_list.h"

NO_OPTIMIZATION

namespace testing{

using std::array;

class OdeFunTester_otomo2018 : public testing::Tester
{
public:
    ODE *ode;
    cpar_t* cpar;
    const Parameters *par;

    OdeFunTester_otomo2018(std::string test_group_name): testing::Tester(test_group_name) {}

    void set_up() override
    {
        ErrorHandler::print_when_log = false;
        ErrorHandler::clear_errors();
        // Set up the ODE object
        ode = new ODE();
        cpar = new cpar_t();
        par = Parameters::get_parameters(Parameters::mechanism::chemkin_otomo2018);

        cpar->ID = 0;
        cpar->mechanism = Parameters::mechanism::chemkin_otomo2018;
        // Initial conditions:
        cpar->R_E = 10e-6;
        cpar->set_species({par->get_species("H2"), par->get_species("N2")}, {0.75, 0.25});
        // Ambient parameters:
        cpar->P_amb = 101325.0;
        cpar->T_inf = 293.15;
        // Liquid parameters:
        cpar->alfa_M = 0.35;
        cpar->P_v = 2338.1;
        cpar->mu_L = 0.001;
        cpar->rho_L = 998.2;
        cpar->c_L = 1483.0;
        cpar->surfactant = 1.0;
        // Simulation settings:
        cpar->enable_heat_transfer = true;
        cpar->enable_evaporation = true;
        cpar->enable_reactions = true;
        cpar->enable_dissipated_energy = true;
        cpar->target_specie = par->get_species("NH3");
        // Excitation parameters:
        cpar->excitation_type = Parameters::excitation::sin_impulse;
        cpar->set_excitation_params({-2.0e5, 30000.0, 1.0});

        // Init the ODE object
        (void)ode->init(*cpar);
    }

    void tear_down() override
    {
        if (ErrorHandler::get_error_count() != 0) ErrorHandler::print_errors();
        ErrorHandler::clear_errors();
        delete ode;
        delete cpar;
    }
};

void test_ode_fun_otomo2018()
{
    OdeFunTester_otomo2018 tester = OdeFunTester_otomo2018("Test ode_fun_cpp.h's ODE class with chemkin_otomo2018");

    ADD_TEST(tester, "Test vapour_pressure() and viscosity()",
        ASSERT_APPROX(vapour_pressure(273.15), 611.21, 1e-3);
        ASSERT_APPROX(vapour_pressure(373.15), 101307.78, 1e-3);
        ASSERT_APPROX(vapour_pressure(323.15), 12349.40, 1e-3);
        ASSERT_APPROX(viscosity(273.15), 0.0017258837501673671, 1e-3);
        ASSERT_APPROX(viscosity(373.15), 0.00028977828661600933, 1e-3);
        ASSERT_APPROX(viscosity(323.15), 0.0005590479674358306, 1e-3);
    );

    ADD_TEST(tester, "Test initial_conditions()",
        array<double, 32+4> x_0;
        array<double, 32+4> x_0_expected = {
            1.0000000000000001e-05, 0.0000000000000000e+00, 2.9314999999999998e+02, 0.0000000000000000e+00, 0.0000000000000000e+00,
            3.4888091814540781e-05, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 9.5926618412304955e-07, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 1.1629363938180262e-05,
            0.0000000000000000e+00
        };
        is_success success = tester.ode->initial_conditions(x_0.data());
        ASSERT_APPROX_ARRAY(x_0.data(), x_0_expected.data(), 32+4, 1e-15);
        ASSERT_TRUE(success);

        tester.ode->cpar->enable_evaporation = false;
        x_0_expected = {
            1.0000000000000001e-05, 0.0000000000000000e+00, 2.9314999999999998e+02, 0.0000000000000000e+00, 0.0000000000000000e+00,
            3.5607541452633068e-05, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00,
            0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 0.0000000000000000e+00, 1.1869180484211024e-05,
            0.0000000000000000e+00
        };
        success = tester.ode->initial_conditions(x_0.data());
        ASSERT_APPROX_ARRAY(x_0.data(), x_0_expected.data(), 32+4, 1e-15);
        ASSERT_TRUE(success);

        tester.ode->cpar->enable_evaporation = true;
        tester.ode->cpar->P_amb = 0.0;
        tester.ode->cpar->R_E = 100.0e-6;
        success = tester.ode->initial_conditions(x_0.data());
        ASSERT_FALSE(success);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 1);
        ErrorHandler::clear_errors();
    );

    ADD_TEST(tester, "Test init() error",
        ErrorHandler::clear_errors(); 
        tester.cpar->set_species({tester.par->get_species("H2"), tester.par->get_species("N2")}, {0.75, 0.255});
        tester.ode->init(*tester.cpar);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 1);
        ErrorHandler::clear_errors();
    );

    ADD_TEST(tester, "Test check_before_call",
        ErrorHandler::clear_errors();
        ASSERT_EQUAL(tester.ode->error_ID, ErrorHandler::no_error);
        ASSERT_TRUE(tester.ode->check_before_call());

        auto par = tester.ode->par;
        tester.ode->par = nullptr;
        ASSERT_FALSE(tester.ode->check_before_call());
        ASSERT_EQUAL(tester.ode->error_ID, 0);
        tester.ode->par = par;
        ASSERT_FALSE(tester.ode->check_before_call());
        ASSERT_EQUAL(tester.ode->error_ID, 0);
        tester.ode->error_ID = ErrorHandler::no_error;

        auto cpar = tester.ode->cpar;
        tester.ode->cpar = nullptr;
        ASSERT_FALSE(tester.ode->check_before_call());
        ASSERT_EQUAL(tester.ode->error_ID, 1);
        tester.ode->cpar = cpar;
        tester.ode->error_ID = ErrorHandler::no_error;

        tester.ode->num_species = 0;
        ASSERT_FALSE(tester.ode->check_before_call());
        ASSERT_EQUAL(tester.ode->error_ID, 2);
        tester.ode->num_species = tester.par->num_species;
        tester.ode->error_ID = ErrorHandler::no_error;
        ErrorHandler::clear_errors();
    );

    ADD_TEST(tester, "Test check_after_call",
        ErrorHandler::clear_errors();
        tester.ode->num_species = 1;
        const double t = 3.842889557991261e-05;
        array<double, 1+4> x = {4.17769608e-06, 8.29024721e+01, 1.50982469e+02, 9.32148950e-09, 9.32148950e-09};
        array<double, 1+4> dxdt = {0.0, 0.0, 0.0, 0.0, 0.0};
        ASSERT_TRUE(tester.ode->check_after_call(t, x.data(), dxdt.data()));
        ASSERT_EQUAL(tester.ode->error_ID, ErrorHandler::no_error);

        dxdt[3] = std::numeric_limits<double>::infinity();
        ASSERT_FALSE(tester.ode->check_after_call(t, x.data(), dxdt.data()));
        ASSERT_EQUAL(tester.ode->error_ID, 0);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 1);
        ErrorHandler::clear_errors();
    );

    ADD_TEST(tester, "Test pressure()",
        // test with IC
        double t = 0.0;
        double R = 1.0e-5, R_dot = 0.0;
        double p = 115718.99999999997, p_dot = 1.4057234685268682e-05;
        auto result = tester.ode->pressures(t, R, R_dot, p, p_dot);
        ASSERT_APPROX(result.first, -2.915631181800611e-14, 1e-30);
        ASSERT_APPROX(result.second, 37767092.609775126, 1e-30);

        // test mid solution
        t = 2.5275786980147761e-05;
        R = 4.3518221660304860e-07; R_dot = 8.5315176399102029e+01;
        p = 2.8245762183248737e+10; p_dot = -3.7031375516170371e+19;
        result = tester.ode->pressures(t, R, R_dot, p, p_dot);
        ASSERT_APPROX(result.first, 2.8295277691386059e+07, 1e-30);
        ASSERT_APPROX(result.second, -3.7098063137087264e+16, 1e-30);
        
        // test no excitation
        tester.cpar->excitation_type = Parameters::excitation::no_excitation;
        tester.cpar->set_excitation_params({});
        (void)tester.ode->init(*tester.cpar);
        result = tester.ode->pressures(t, R, R_dot, p, p_dot);
        ASSERT_EQUAL(tester.ode->cpar->excitation_type, Parameters::excitation::no_excitation);
        ASSERT_APPROX(result.first, 2.8295477781368800e+07, 1e-30);
        ASSERT_APPROX(result.second, -3.7098063139049688e+16, 1e-30);

        // test sin_impulse_logf
        tester.cpar->excitation_type = Parameters::excitation::sin_impulse_logf;
        tester.cpar->set_excitation_params({-2.0e5, 4.5, 1.0});
        (void)tester.ode->init(*tester.cpar);
        result = tester.ode->pressures(t, R, R_dot, p, p_dot);
        ASSERT_EQUAL(tester.ode->cpar->excitation_type, Parameters::excitation::sin_impulse_logf);
        ASSERT_APPROX(tester.ode->cpar->excitation_params[1], 4.5, 1e-30);
        ASSERT_APPROX(result.first, 2.8295286952975709e+07, 1e-30);
        ASSERT_APPROX(result.second, -3.7098063126916608e+16, 1e-30);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    ADD_TEST(tester, "Test thermodynamic()",
        double T = 500.0;
        array<double, 32> C_p = {
            3.0474958378028595e+08,  3.9837289683487451e+08,  2.9384497020307267e+08,  3.1054097230566025e+08,  2.0786149999999866e+08,
            2.1232595101185739e+08,  2.9480655532619637e+08,  3.9504222746604007e+08,  3.5223452971475041e+08,  5.0066529153384972e+08,
            3.5574177389418930e+08,  2.9292538720635188e+08,  2.0789022513314363e+08,  3.8059201406610036e+08,  5.9453332097169578e+08,
            4.6499279353994006e+08,  4.7202038471869051e+08,  3.7607736221551645e+08,  3.9792847637225366e+08,  4.3514528802158839e+08,
            5.6486793361316490e+08,  4.8660237318425047e+08,  6.2225908103945732e+08,  7.1936402987179506e+08,  4.5865628351235968e+08,
            7.0420199951889777e+08,  5.7670600017699897e+08,  4.5616756509997743e+08,  4.3534601819365680e+08,  2.0786149999999866e+08,
            2.0786149999999866e+08,  2.9610755433317524e+08
        };
        array<double, 32> H = {
            9.7329595746410852e+11, -3.8092213805483020e+11,  5.9001067897701729e+10,  6.0846147572470673e+10,  2.2219280212359995e+12,
            2.5351315530533438e+12,  4.3276882251874268e+11,  1.9796747026442065e+11, -2.3489921945450688e+12, -1.2653197336379902e+12,
            1.9576618778535950e+12,  3.6468664226175664e+12,  4.7687299676458340e+12,  2.5709556955506138e+12, -3.3207917122765240e+11,
            7.3378063557831177e+11,  1.0953033057279034e+12,  1.1401768563114077e+12,  2.2205152667666978e+12,  4.2344765191546844e+11,
            -6.8261416702572363e+11, -3.2252038597375793e+11,  8.5764321076395300e+11, -1.2118337614280164e+12,  9.0183941278938940e+11,
            1.0774081231615328e+12,  1.6423931182660859e+12,  2.2128985690922744e+12,  2.9632387743471084e+12,  4.1956843774999474e+10,
            4.1956843774999474e+10,  5.9152467677837059e+10
         };
        array<double, 32> S = {
           2.2625765916126904e+09,  2.1150242817506757e+09,  1.4578059520944695e+09,  2.2069580614464011e+09,  1.2546384943600714e+09,
           1.7218981854402268e+09,  1.9905491791019156e+09,  2.4821373325935388e+09,  2.0652996386839151e+09,  2.5831165829818473e+09,
           2.1266908536591992e+09,  1.9632738778251448e+09,  1.6404817863583310e+09,  2.4308914210310197e+09,  2.6340462411470847e+09,
           2.5145553780900550e+09,  2.5541713496260710e+09,  2.3921643715472860e+09,  2.5014341847725754e+09,  2.6090796437569308e+09,
           2.8057846242148795e+09,  2.5956322067465029e+09,  2.8080554866463647e+09,  2.9933703311643224e+09,  2.4183525890158973e+09,
           2.6989314018140345e+09,  2.5467426603482900e+09,  2.3954466723359380e+09,  2.4326721845369520e+09,  1.6559240797721674e+09,
           1.3689961445788217e+09,  2.0674910699242969e+09
        };
        array<double, 32> C_v = {
            2.2160498378028595e+08,  3.1522829683487451e+08,  2.1070037020307267e+08,  2.2739637230566025e+08,  1.2471689999999866e+08,
            1.2918135101185739e+08,  2.1166195532619637e+08,  3.1189762746604007e+08,  2.6908992971475041e+08,  4.1752069153384972e+08,
            2.7259717389418930e+08,  2.0978078720635188e+08,  1.2474562513314363e+08,  2.9744741406610036e+08,  5.1138872097169578e+08,
            3.8184819353994006e+08,  3.8887578471869051e+08,  2.9293276221551645e+08,  3.1478387637225366e+08,  3.5200068802158839e+08,
            4.8172333361316490e+08,  4.0345777318425047e+08,  5.3911448103945732e+08,  6.3621942987179506e+08,  3.7551168351235968e+08,
            6.2105739951889777e+08,  4.9356140017699897e+08,  3.7302296509997743e+08,  3.5220141819365680e+08,  1.2471689999999866e+08,
            1.2471689999999866e+08,  2.1296295433317524e+08
        };

        tester.ode->thermodynamic(T);
        ASSERT_APPROX_ARRAY(tester.ode->C_p, C_p, tester.par->num_species, 1e-15);
        ASSERT_APPROX_ARRAY(tester.ode->H,   H,   tester.par->num_species, 1e-15);
        ASSERT_APPROX_ARRAY(tester.ode->S,   S,   tester.par->num_species, 1e-15);
        ASSERT_APPROX_ARRAY(tester.ode->C_v, C_v, tester.par->num_species, 1e-15);

        T = 2000.0;
        C_p = {
            3.6727483426262182e+08,  7.0791175890078354e+08,  3.4195144045153785e+08,  3.7855287085205990e+08,  2.0786150000000000e+08,
            2.0821145399974772e+08,  3.4714099999109602e+08,  5.5774037524923134e+08,  5.1678448526156145e+08,  7.3964147774558902e+08,
            5.2531916850779402e+08,  3.5611042136743921e+08,  2.0776686641265634e+08,  5.4396335100756264e+08,  9.9688371927763689e+08,
            7.2841918116295946e+08,  7.4517177077357769e+08,  6.1465419557049680e+08,  5.3853666204446292e+08,  5.8275178119435191e+08,
            7.8001586167767429e+08,  7.7079951726870406e+08,  8.1549480420606339e+08,  1.0073854994566317e+09,  6.1250477505483723e+08,
            1.1833531083065996e+09,  9.6915607293119979e+08,  7.5261104735493588e+08,  7.3823940659765303e+08,  2.0786150000000000e+08,
            2.0786150000000000e+08,  3.6009411439944470e+08
        };
        H = {
            1.4910490122383362e+12,  4.9324517813015399e+11,  5.2959361732799243e+11,  5.9176924714257556e+11,  2.5337202712360000e+12,
            2.8489286794606016e+12,  9.1114253451397620e+11,  9.3929190117896545e+11, -1.6877328165551868e+12, -2.8931412403665735e+11,
            2.6356049082388169e+12,  4.1338216942188174e+12,  5.0806185491925215e+12,  3.3000376671134258e+12,  9.3742563044900854e+11,
            1.6809082351564985e+12,  2.0662265564488088e+12,  1.9075620322896826e+12,  2.9547735645741445e+12,  1.2296257814038352e+12,
            3.8215578986084039e+11,  6.9818693687265601e+11,  2.0112964898947197e+12,  1.8100900713349695e+11,  1.7456847265142607e+12,
            2.5956362600412344e+12,  2.8870666513694131e+12,  3.1854259891759326e+12,  3.9018318269835127e+12,  3.5374909377500000e+11,
            3.5374909377500000e+11,  5.6087367880159485e+11
         };
        S = {
            2.7310222600800166e+09,  2.8726000649038272e+09,  1.8844472519261644e+09,  2.6874671331667056e+09,  1.5427957197039967e+09,
            2.0125037983812184e+09,  2.4236402506268382e+09,  3.1425048397017288e+09,  2.6493029883668375e+09,  3.4480696144099913e+09,
            2.7251176057511544e+09,  2.4025905385948567e+09,  1.9287117361304195e+09,  3.0786176595022106e+09,  3.7434603418660884e+09,
            3.3477467781264277e+09,  3.4091284780020056e+09,  3.0634649583184652e+09,  3.1585582725429821e+09,  3.3324541509725847e+09,
            3.7573186189553137e+09,  3.4942233374196630e+09,  3.8478349012785077e+09,  4.2387627828049660e+09,  3.1747182079871321e+09,
            4.0272608079944873e+09,  3.6358854809714727e+09,  3.2469416872345896e+09,  3.2511599123662658e+09,  1.9440813051160927e+09,
            1.6571533699227471e+09,  2.5204054839525170e+09
        };
        C_v = {
            2.8413023426262182e+08,  6.2476715890078354e+08,  2.5880684045153785e+08,  2.9540827085205990e+08,  1.2471690000000000e+08,
            1.2506685399974772e+08,  2.6399639999109602e+08,  4.7459577524923134e+08,  4.3363988526156145e+08,  6.5649687774558902e+08,
            4.4217456850779402e+08,  2.7296582136743921e+08,  1.2462226641265634e+08,  4.6081875100756264e+08,  9.1373911927763689e+08,
            6.4527458116295946e+08,  6.6202717077357769e+08,  5.3150959557049680e+08,  4.5539206204446292e+08,  4.9960718119435191e+08,
            6.9687126167767429e+08,  6.8765491726870406e+08,  7.3235020420606339e+08,  9.2424089945663166e+08,  5.2936017505483723e+08,
            1.1002085083065996e+09,  8.8601147293119979e+08,  6.6946644735493588e+08,  6.5509480659765303e+08,  1.2471690000000000e+08,
            1.2471690000000000e+08,  2.7694951439944470e+08
        };

        tester.ode->thermodynamic(T);
        ASSERT_APPROX_ARRAY(tester.ode->C_p, C_p, tester.par->num_species, 1e-15);
        ASSERT_APPROX_ARRAY(tester.ode->H,   H,   tester.par->num_species, 1e-15);
        ASSERT_APPROX_ARRAY(tester.ode->S,   S,   tester.par->num_species, 1e-15);
        ASSERT_APPROX_ARRAY(tester.ode->C_v, C_v, tester.par->num_species, 1e-15);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );

    ADD_TEST(tester, "Test evaporation()",
        double p = 2.8245762183248737e+10;
        double T = 4.0621201351292711e+03;
        double X_H2O = 3.2315225982636570e-01;
        double n_net_dot_expected = -51668226.44780852;
        double evap_energy_expected = -10739121722177.816;

        auto result = tester.ode->evaporation(p, T, X_H2O);
        ASSERT_APPROX(result.first, n_net_dot_expected, 1e-30);
        ASSERT_APPROX(result.second, evap_energy_expected, 1e-30);

        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    ADD_TEST(tester, "Test forward_rate()",
        double T = 4.0621201351292711e+03;
        double M = 8.3630845334234449e-01;
        double p = 2.8245762183248737e+10;
        array<double, 23> M_eff = {
            4.442042245830151 , 4.442042245830151 , 4.442042245830151 , 1.5504845229406548, 4.771575680526707 , 3.802543361095668 , 0.8363084533423445,
            0.8363084533423445, 3.2686031528275867, 3.2686031528275867, 0.8363084533423445, 3.2686031528275867, 0.9206235946112362, 0.8363084533423445,
            0.8363084533423445, 0.8363084533423445, 0.8363084533423445, 0.8363084533423445, 0.8363084533423445, 3.9074809543654103, 0.8363084533423445,
            0.8363084533423445, 0.8363084533423445
        };
        array<double, 213> expected = {
            1.5052210601806168e+13,  1.4196277562547683e+12,  8.1818492376218922e+13,  4.0467134762628508e+13,  2.0141742468252184e+13,
           -3.0028012013681558e+12,  9.8803375226195514e+08,  1.5068421905964041e+09,  1.1570312653617345e+15,  2.3710980397941102e+13,
            1.9881498262820699e+09,  5.3883488871989792e+10,  1.0685334105069684e+14,  1.1681976613162058e+14,  6.8452150968370195e+13,
            1.4000000000000000e+12,  1.2885538498881217e+14,  1.8549971001097385e+11,  4.2473485653858219e+13,  9.1293092520926208e+11,
            6.0333784583361826e+12,  4.9281762366524287e+12,  1.4676479347478562e+13,  1.7927697725628711e+13,  9.6869577532926828e+13,
            1.6343318814913323e+12,  3.0880295706472703e+13,  2.0590064900556259e+11,  7.6540392612849531e+13,  4.2320886551228219e+13,
            4.2897734266588969e+13,  1.9656340591292717e+10,  2.1346148964674578e+14,  6.6000000000000000e+13,  7.0000000000000000e+12,
            2.0681794506426522e+14,  3.6614057469134133e+13,  5.1875392063212652e+09,  5.0000000000000000e+13,  1.4477332833658178e+09,
            4.7427972949270166e+11,  3.8742583532996483e+09,  4.0760842521374750e+11,  1.1678176531104420e+11,  2.8667327974963297e+13,
            7.1457256876273965e+12,  7.0000000000000000e+13,  3.2049448521511934e+12,  4.0086893123079755e+11, -4.9622126389397229e+11,
            5.3186612244347760e+11,  1.0362579306161326e+13,  3.0459071417412498e+10,  1.4329440496762598e+12,  1.0000000000000000e+14,
            9.2000000000000000e+13,  1.4149261666006246e+13,  3.0837403827306613e+13,  3.3927969336688013e+12,  3.3242403198516370e+11,
            5.4882727755354164e+13,  3.0000000000000000e+13,  1.8008141687337457e+13,  1.5802242511340344e+12,  1.0000000000000000e+13,
            4.1000000000000000e+12,  5.9000000000000000e+12,  3.8000000000000000e+13,  1.1941625076961529e+13,  3.0085223381745086e+13,
            1.0000000000000000e+09,  1.0000000000000000e+14,  1.9549648911832371e+13,  4.1126824704388461e+13,  1.2970081109262684e+13,
            5.0000000000000000e+13,  2.2883245722714434e+13,  5.0000000000000000e+13,  5.0000000000000000e+13,  5.0000000000000000e+13,
            2.6940837863801077e+11,  5.7301884249216602e+13,  3.3168933372754547e+13,  5.2930112808775719e+13,  3.0313600543776562e+13,
            6.0985917143211641e+13,  2.9769631187590617e+13,  3.0312546369372074e+13,  2.3667822935808008e+13,  1.8061991564161965e+13,
            4.4252796681324812e+13,  4.5265597484336820e+13,  3.2238820701074477e+13,  5.5195779337237175e+10,  1.7343808110428801e+12,
            7.2020888827479506e+08,  3.8638930032621731e+14,  5.0000000000000000e+13,  3.8638930032621731e+14,  1.0000000000000000e+14,
            1.8031185565151219e+14,  1.4109045767023818e+12,  2.6504548463346250e+12,  6.5936294905297958e+10,  4.6832739283058014e+11,
            7.6115509589016159e+10,  4.0000000000000000e+13,  1.1858606628846258e+14,  7.0000000000000000e+13,  8.9310760454009688e+13,
            4.5903666463912984e+13,  1.8031185565151219e+14,  1.8031185565151219e+14,  1.3555019111220355e+11,  2.0808052700724391e+13,
            4.6832739283058014e+11,  4.5530676967004836e+13,  1.6001067961358003e+14,  1.0000000000000000e+13,  3.6000000000000000e+13,
            2.7556019191716475e+12,  2.1261449612182231e+12,  8.9785159504600328e+13,  2.2333578455671343e+12,  2.3518010791232939e+12,
            3.9747364080240555e-01,  1.2429894612870575e+14,  1.4616427887263662e+12,  1.2475070351997136e+12,  5.9593377427289990e+12,
            7.2081253984188263e+10,  3.1061547846251862e+11,  5.9149259341033888e+08,  8.0829243356703682e+12,  2.9679038606241279e+12,
            1.8000000000000000e+12,  3.8257023643024570e+13,  3.3257874408298230e+13,  5.7349311833058223e+12,  5.1931755240221148e+13,
            3.4813073744460750e+09,  1.0636184119115322e+12,  4.3576141820886372e+12,  3.3086855066046676e+13,  3.0276070996025742e+13,
            2.1318275783525113e+13,  5.9263188644874336e+12,  6.0000000000000000e+13,  1.0000000000000000e+13,  1.4000000000000000e+13,
            1.5000000000000000e+12,  3.4737256905716896e+10,  1.6290995457987227e+13,  1.9010052528532477e+13,  2.2702602450230953e+13,
            3.1959520788437922e+13,  1.1660389228130957e+10,  7.5391525058809221e+07,  1.7619017772630730e+10,  7.0886475073612094e+13,
            2.9828694320721421e+12,  5.1384420262062512e+11,  1.4092764767882181e+10,  7.9837702434427689e+10,  7.8151320184170605e+12,
            1.9137774522268741e+11,  8.5305535472845740e+11,  1.8942678371811719e+11,  1.4731014443301978e+11,  2.3535036566442996e+13,
            3.2464562570365926e+13,  9.7084376878770938e+12,  7.3434165599735000e+12,  5.1356560252852646e+12,  3.3941034158597424e+11, // 7.3434165599735000e+12 changed from 1.6036989488236045e+13, since reference code is faulty
            1.7555707323412460e+11,  1.3522345277774113e+13,  3.2386449539262793e+12,  3.9394809185941271e+07,  6.2212606198477227e+13,
            4.7679688791913727e+13,  3.0000000000000000e+13,  3.0000000000000000e+13,  2.2951833231956492e+13,  3.0000000000000000e+13,
            1.5595069972513016e+11,  8.7047102728316219e+13,  7.0857788230817012e+12,  1.0635226935925801e+13,  3.0000000000000000e+13,
            2.0000000000000000e+13,  1.0263879257107513e+07,  2.5589659013274809e+14,  8.0334864397479734e+13,  1.0000000000000000e+13,
            9.2777412868716562e+13,  2.9738016859852918e+13,  4.5903666463912984e+13,  9.1336910924314001e+11,  6.3594208893114626e+06,
            1.8267930787562031e+07,  1.3882520951707861e+14,  7.0000000000000000e+13,  9.5442331542991547e+13,  7.0000000000000000e+13,
            4.5903666463912984e+13,  2.0000000000000000e+12,  9.0000000000000000e+12,  1.8031185565151219e+14,  7.1677759727077576e+11,
            2.0808052700724391e+13,  1.2779736906490357e+03,  4.1225488573798006e+14
        };
        std::copy(M_eff.begin(), M_eff.end(), tester.ode->M_eff);

        tester.ode->forward_rate(T, M, p);
        ASSERT_APPROX_ARRAY(tester.ode->k_forward, expected, tester.par->num_reactions, 1e-14);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );


    ADD_TEST(tester, "Test backward_rate()",
        double T = 4.0621201351292711e+03;
        array<double, 213> k_forward = {
            1.5052210601806168e+13,  1.4196277562547683e+12,  8.1818492376218922e+13,  4.0467134762628508e+13,  2.0141742468252184e+13,
           -3.0028012013681558e+12,  9.8803375226195514e+08,  1.5068421905964041e+09,  1.1570312653617345e+15,  2.3710980397941102e+13,
            1.9881498262820699e+09,  5.3883488871989792e+10,  1.0685334105069684e+14,  1.1681976613162058e+14,  6.8452150968370195e+13,
            1.4000000000000000e+12,  1.2885538498881217e+14,  1.8549971001097385e+11,  4.2473485653858219e+13,  9.1293092520926208e+11,
            6.0333784583361826e+12,  4.9281762366524287e+12,  1.4676479347478562e+13,  1.7927697725628711e+13,  9.6869577532926828e+13,
            1.6343318814913323e+12,  3.0880295706472703e+13,  2.0590064900556259e+11,  7.6540392612849531e+13,  4.2320886551228219e+13,
            4.2897734266588969e+13,  1.9656340591292717e+10,  2.1346148964674578e+14,  6.6000000000000000e+13,  7.0000000000000000e+12,
            2.0681794506426522e+14,  3.6614057469134133e+13,  5.1875392063212652e+09,  5.0000000000000000e+13,  1.4477332833658178e+09,
            4.7427972949270166e+11,  3.8742583532996483e+09,  4.0760842521374750e+11,  1.1678176531104420e+11,  2.8667327974963297e+13,
            7.1457256876273965e+12,  7.0000000000000000e+13,  3.2049448521511934e+12,  4.0086893123079755e+11, -4.9622126389397229e+11,
            5.3186612244347760e+11,  1.0362579306161326e+13,  3.0459071417412498e+10,  1.4329440496762598e+12,  1.0000000000000000e+14,
            9.2000000000000000e+13,  1.4149261666006246e+13,  3.0837403827306613e+13,  3.3927969336688013e+12,  3.3242403198516370e+11,
            5.4882727755354164e+13,  3.0000000000000000e+13,  1.8008141687337457e+13,  1.5802242511340344e+12,  1.0000000000000000e+13,
            4.1000000000000000e+12,  5.9000000000000000e+12,  3.8000000000000000e+13,  1.1941625076961529e+13,  3.0085223381745086e+13,
            1.0000000000000000e+09,  1.0000000000000000e+14,  1.9549648911832371e+13,  4.1126824704388461e+13,  1.2970081109262684e+13,
            5.0000000000000000e+13,  2.2883245722714434e+13,  5.0000000000000000e+13,  5.0000000000000000e+13,  5.0000000000000000e+13,
            2.6940837863801077e+11,  5.7301884249216602e+13,  3.3168933372754547e+13,  5.2930112808775719e+13,  3.0313600543776562e+13,
            6.0985917143211641e+13,  2.9769631187590617e+13,  3.0312546369372074e+13,  2.3667822935808008e+13,  1.8061991564161965e+13,
            4.4252796681324812e+13,  4.5265597484336820e+13,  3.2238820701074477e+13,  5.5195779337237175e+10,  1.7343808110428801e+12,
            7.2020888827479506e+08,  3.8638930032621731e+14,  5.0000000000000000e+13,  3.8638930032621731e+14,  1.0000000000000000e+14,
            1.8031185565151219e+14,  1.4109045767023818e+12,  2.6504548463346250e+12,  6.5936294905297958e+10,  4.6832739283058014e+11,
            7.6115509589016159e+10,  4.0000000000000000e+13,  1.1858606628846258e+14,  7.0000000000000000e+13,  8.9310760454009688e+13,
            4.5903666463912984e+13,  1.8031185565151219e+14,  1.8031185565151219e+14,  1.3555019111220355e+11,  2.0808052700724391e+13,
            4.6832739283058014e+11,  4.5530676967004836e+13,  1.6001067961358003e+14,  1.0000000000000000e+13,  3.6000000000000000e+13,
            2.7556019191716475e+12,  2.1261449612182231e+12,  8.9785159504600328e+13,  2.2333578455671343e+12,  2.3518010791232939e+12,
            3.9747364080240555e-01,  1.2429894612870575e+14,  1.4616427887263662e+12,  1.2475070351997136e+12,  5.9593377427289990e+12,
            7.2081253984188263e+10,  3.1061547846251862e+11,  5.9149259341033888e+08,  8.0829243356703682e+12,  2.9679038606241279e+12,
            1.8000000000000000e+12,  3.8257023643024570e+13,  3.3257874408298230e+13,  5.7349311833058223e+12,  5.1931755240221148e+13,
            3.4813073744460750e+09,  1.0636184119115322e+12,  4.3576141820886372e+12,  3.3086855066046676e+13,  3.0276070996025742e+13,
            2.1318275783525113e+13,  5.9263188644874336e+12,  6.0000000000000000e+13,  1.0000000000000000e+13,  1.4000000000000000e+13,
            1.5000000000000000e+12,  3.4737256905716896e+10,  1.6290995457987227e+13,  1.9010052528532477e+13,  2.2702602450230953e+13,
            3.1959520788437922e+13,  1.1660389228130957e+10,  7.5391525058809221e+07,  1.7619017772630730e+10,  7.0886475073612094e+13,
            2.9828694320721421e+12,  5.1384420262062512e+11,  1.4092764767882181e+10,  7.9837702434427689e+10,  7.8151320184170605e+12,
            1.9137774522268741e+11,  8.5305535472845740e+11,  1.8942678371811719e+11,  1.4731014443301978e+11,  2.3535036566442996e+13,
            3.2464562570365926e+13,  9.7084376878770938e+12,  7.3434165599735000e+12,  5.1356560252852646e+12,  3.3941034158597424e+11, // 7.3434165599735000e+12 changed from 1.6036989488236045e+13, since reference code is faulty
            1.7555707323412460e+11,  1.3522345277774113e+13,  3.2386449539262793e+12,  3.9394809185941271e+07,  6.2212606198477227e+13,
            4.7679688791913727e+13,  3.0000000000000000e+13,  3.0000000000000000e+13,  2.2951833231956492e+13,  3.0000000000000000e+13,
            1.5595069972513016e+11,  8.7047102728316219e+13,  7.0857788230817012e+12,  1.0635226935925801e+13,  3.0000000000000000e+13,
            2.0000000000000000e+13,  1.0263879257107513e+07,  2.5589659013274809e+14,  8.0334864397479734e+13,  1.0000000000000000e+13,
            9.2777412868716562e+13,  2.9738016859852918e+13,  4.5903666463912984e+13,  9.1336910924314001e+11,  6.3594208893114626e+06,
            1.8267930787562031e+07,  1.3882520951707861e+14,  7.0000000000000000e+13,  9.5442331542991547e+13,  7.0000000000000000e+13,
            4.5903666463912984e+13,  2.0000000000000000e+12,  9.0000000000000000e+12,  1.8031185565151219e+14,  7.1677759727077576e+11,
            2.0808052700724391e+13,  1.2779736906490357e+03,  4.1225488573798006e+14
        };

        array<double, 32> S = {
            2.9964447463749132e+09, 3.4107499865419793e+09, 2.1444132854474998e+09, 2.9690745784960756e+09, 1.6900776188059461e+09,
            2.1610466469490809e+09, 2.6838660035944233e+09, 3.5636693509641261e+09, 3.0464093993227592e+09, 4.0015926363579655e+09,
            3.1249756777432466e+09, 2.6726955625485172e+09, 2.0777748220883002e+09, 3.4759409833101501e+09, 4.4837669187662077e+09,
            3.8905227267160296e+09, 3.9627769267938313e+09, 3.5339740775225463e+09, 3.5530281695274563e+09, 3.7639888592964911e+09,
            4.3255595001131496e+09, 4.0596257446183519e+09, 4.4308830332833261e+09, 4.9630023828935909e+09, 3.6208405407470455e+09,
            4.9092592514239130e+09, 4.3564310850030422e+09, 3.8039674216520810e+09, 3.8023940340864868e+09, 2.0913632042180421e+09,
            1.8044352690246964e+09, 2.7818834048059111e+09
        };

        array<double, 32> H = {
            2.2649608255069849e+12,  2.0694371798261724e+12,  1.2923026543436375e+12,  1.4160726053307671e+12,  2.9623556557041729e+12,
            3.2818243563436680e+12,  1.6731904622055471e+12,  2.1726181726243462e+12, -5.2266841822963855e+11,  1.3304552005217981e+12,
            3.8085218308853276e+12,  4.9263405433493799e+12,  5.5156635670151865e+12,  4.4592512624688975e+12,  3.1000174576349883e+12,
            3.2690770088517007e+12,  3.6843774279386475e+12,  3.2851504891096147e+12,  4.1062630823684106e+12,  2.4925644387648994e+12,
            2.0398719314145625e+12,  2.3487263788184624e+12,  3.7090886263088584e+12,  2.2908367029685591e+12,  3.0475460732285894e+12,
            5.1745983204210225e+12,  4.9928664643988770e+12,  4.8130006749757480e+12,  5.5134832264040029e+12,  7.8238447824317297e+11,
            7.8238447824317297e+11,  1.3235494124913455e+12
         };
        
        array<double, 213> expected = {
            8.8863207722301523e+12,  7.4719908457596899e+11,  4.3063896388008750e+13,  2.5730497518861270e+13,  2.4332174236238082e+13,
           -3.6275253813636538e+12,  1.0461493072968816e+14,  1.5954737480265766e+14,  5.7515520284855518e+09,  1.9964928980661669e+08,
            3.3107414988649431e+14,  8.9728802303460900e+15,  2.4639695135828992e+11,  4.7846174235581671e+11,  8.7116723614447769e+10,
            2.1524166787555327e+09,  2.7777637561187274e+11,  4.8308087921989024e+08,  1.1061003163824571e+11,  5.2851419866210831e+10,
            3.4928449602053455e+11,  4.6982346126192344e+13,  8.4022228220832980e+08,  1.2683428520795776e+12,  3.6071267197699512e+12,
            7.3518751872909546e+10,  1.3891185893862654e+12,  3.5219902752519975e+15,  1.2365145513476654e+13,  3.5985302013569424e+12,
            4.4064477884626934e+12,  4.4884776805110062e+10,  4.0595736588979266e+13,  1.1467143603394434e+13,  7.0068170679867456e+11,
            2.0701935820603410e+13,  4.4274582740653145e+12,  1.3151755641336332e+08,  9.1183411747000938e+12,  3.8672138426108187e+05,
            1.2669054143037437e+08,  9.3587288424445707e+06,  3.4482302038325059e+13,  1.1978654852902618e+10,  3.3747340950547477e+13,
            9.7810416792505098e+12,  4.8739995080209985e+11,  1.8739455755780087e+10,  2.2606194308115109e+06, -2.7983396660259268e+06,
            3.9912517754032562e+11,  6.3374957313210010e+12,  6.1107481634115642e+06,  1.5147294315199771e+11,  2.2112982137526398e+13,
            7.9393182589293259e+10,  2.4559660252736680e+13,  4.3358160752714014e+12,  3.4767074115492783e+12,  1.6935947432005414e+08,
            6.3814902995978875e+13,  1.0373514412174478e+07,  4.0500984159426086e+13,  7.3694853935434610e+07,  5.1951425466777217e+12,
            6.8022872156309586e+09,  7.5546616649682980e+09,  2.8175382241424591e+11,  5.2272268963779556e+10,  1.2054869579159477e+10,
            1.2513950270746086e+09,  1.1818776875714159e+09,  5.8647780748120674e+12,  2.5583476688886386e+08,  1.7300499209716104e+12,
            3.7574072251512289e+08,  6.6032733064937660e+10,  3.1072890033203092e+09,  3.6579182237883983e+09,  6.2560120921892517e+11,
            1.2430452821692145e+13,  5.1317700234149717e+12,  2.0711753356703384e+12,  2.4949563462147246e+12,  9.9628761675591357e+11,
            3.4727503993496958e+12,  1.1819647973066636e+12,  1.6803980034915438e+13,  9.1481889353563613e+12,  8.5055622532141172e+12,
            1.4529985875011018e+13,  5.7299970062786148e+13,  2.8454591947117535e+13,  1.3463123444162619e+13,  2.4874673136667939e+12,
            1.6593706090268728e+08,  8.9010893137000269e+11,  3.4893023658995850e+11,  4.6849505144023358e+11,  1.4647509729073553e+11,
            5.8712450267208320e+12,  7.9356923783926794e+11,  3.7794615468676682e+10,  1.6080429638759781e+11,  1.0919663852620649e+10,
            1.2944944556960068e+13,  1.9463263807625400e+11,  1.9047536187567484e+11,  5.9178647254149094e+10,  7.5504142698680679e+10,
            4.6881149060721901e+10,  4.0937119677222085e+12,  8.2462573725248105e+12,  5.3158705129258102e+10,  2.0688453976803625e+11,
            7.6137102767014494e+09,  4.5523669106631805e+11,  1.5114504993088260e+11,  4.9717216707007284e+09,  2.1621866791838020e+10,
            6.3552194578613916e+11,  1.6545948156169116e+09,  8.5840286542008167e+11,  3.8529938658731147e+12,  1.5847695292054138e+10,
            4.5530155678208495e-01,  9.1694202493953232e+10,  1.8263919294587162e+09,  5.1714881039000771e+10,  1.5100325406325637e+13,
            1.3366248698211535e+10,  1.9479549141849934e+13,  1.9262086785534053e+09,  1.0474030465195818e+12,  3.0039414964421469e+13,
            2.5658688210647518e+10,  2.9518821190697598e+12,  1.5412497053271258e+09,  2.9822800172357642e+11,  3.2623990956529170e+12,
            1.7838069432836258e+10,  5.1563764202903033e+11,  7.1290719119649979e+10,  5.3480821210752625e+10,  2.5757513872792698e+10,
            2.1909899348624981e+10,  2.5044153052119697e+12,  7.0578085610488427e+08,  1.9924935484384394e+08,  1.2939938891084724e+11,
            7.6517832412997732e+09,  1.0271335554183093e+08,  1.0816790589813375e+13,  2.2987513785764930e+13,  2.0532823871709356e+08,
            4.6011798571124477e+09,  8.9653543902263832e+09,  3.1448818408066905e+08,  3.6534524223969190e+05,  1.4698910428205900e+09,
            1.1445452051576972e+09,  1.8048101448105797e+07,  2.2961673178007275e+08,  1.0344657860815115e+11,  3.3383661054091366e+10,
            5.3794610182457914e+09,  1.3115510390705024e+05,  8.1049634236591400e+10,  5.1108261283343225e+11,  5.2949719189706445e+13,
            4.9667712293304355e+12,  1.0420995406270282e+11,  1.6042795065881537e+11,  6.9807339918595245e+10,  3.3704670625367043e+10,
            1.2559875724980118e+09,  1.1686996395949759e+11,  2.7249588918693652e+11,  5.6762516712312729e+10,  8.4660171828288135e+11,
            3.4150417050494818e+11,  1.6577675986822537e+11,  0.0000000000000000e+00,  1.9859296422407230e+11,  2.1048275057876575e+12,
            1.0134896663509281e+10,  1.6743372003651152e+13,  2.1350758878311897e+12,  8.9585756610320471e+11,  2.0490956742230316e+13,
            1.4310995861338350e+12,  5.9432633274258471e+08,  1.3994456816634320e+11,  2.3123707201020676e+10,  3.8357173805628901e+09,
            3.2261126894550484e+10,  1.0066882623034344e+11,  1.3200124664052518e+11,  9.1304926894997485e+11,  4.5413213097193144e+07,
            1.3045298434243935e+08,  9.3629155850001984e+09,  8.6327519611109746e+12,  3.3880176139377294e+09,  3.3112796739321752e+09,
            1.9685020601115797e+09,  0.0000000000000000e+00,  0.0000000000000000e+00,  1.7189170068180307e+11,  2.7134980583080261e+10,
            8.6869168290036945e+09,  8.6533936263481906e+13,  1.5194695084357945e+07
        };
        std::copy(k_forward.begin(), k_forward.end(), tester.ode->k_forward);
        std::copy(S.begin(), S.end(), tester.ode->S);
        std::copy(H.begin(), H.end(), tester.ode->H);


        tester.ode->backward_rate(T);
        ASSERT_APPROX_ARRAY(tester.ode->k_backward, expected, tester.par->num_reactions, 1e-15);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );
        

    ADD_TEST(tester, "Test production_rate()",
        double T = 4.0621201351292711e+03;
        double M = 8.3630845334234449e-01;
        double p = 2.8245762183248737e+10;
        std::array<double, 32+4> x = {
            4.3518221660304860e-07, 8.5315176399102029e+01, 4.0621201351292711e+03, 3.1698058878988658e-06, 3.2971609996831756e-04,
            4.2195277318908103e-01, 5.0876293345883267e-07, 1.9990135807383077e-03, 2.0290893423940726e-06, 8.1401218931458834e-04,
            4.3305400747014173e-07, 2.7025496660947135e-01, 6.3310006831802919e-06, 1.0841401134656507e-05, 4.3585033688792243e-07,
            3.6096539015479591e-08, 3.2087574285830621e-04, 1.4330856257963369e-06, 1.9318462687392546e-07, 1.4263794097654005e-07,
            5.1100084010304287e-07, 2.6206650462642189e-13, 9.2524228449288033e-10, 1.9330666410172676e-08, 3.1484307465375581e-10,
            4.4345706684912898e-15, 1.1327238171479642e-12, 7.8398165287158956e-07, 7.8924704612340468e-06, 4.9461199040993478e-05,
            2.5212224167075844e-05, 2.4250653878941587e-06, 0.0000000000000000e+00, 0.0000000000000000e+00, 1.4052523544815287e-01,
            1.1439258081172209e-06
        };
        array<double, 32> S = {
            2.9964447463749132e+09, 3.4107499865419793e+09, 2.1444132854474998e+09, 2.9690745784960756e+09, 1.6900776188059461e+09,
            2.1610466469490809e+09, 2.6838660035944233e+09, 3.5636693509641261e+09, 3.0464093993227592e+09, 4.0015926363579655e+09,
            3.1249756777432466e+09, 2.6726955625485172e+09, 2.0777748220883002e+09, 3.4759409833101501e+09, 4.4837669187662077e+09,
            3.8905227267160296e+09, 3.9627769267938313e+09, 3.5339740775225463e+09, 3.5530281695274563e+09, 3.7639888592964911e+09,
            4.3255595001131496e+09, 4.0596257446183519e+09, 4.4308830332833261e+09, 4.9630023828935909e+09, 3.6208405407470455e+09,
            4.9092592514239130e+09, 4.3564310850030422e+09, 3.8039674216520810e+09, 3.8023940340864868e+09, 2.0913632042180421e+09,
            1.8044352690246964e+09, 2.7818834048059111e+09
        };
        array<double, 32> H = {
            2.2649608255069849e+12,  2.0694371798261724e+12,  1.2923026543436375e+12,  1.4160726053307671e+12,  2.9623556557041729e+12,
            3.2818243563436680e+12,  1.6731904622055471e+12,  2.1726181726243462e+12, -5.2266841822963855e+11,  1.3304552005217981e+12,
            3.8085218308853276e+12,  4.9263405433493799e+12,  5.5156635670151865e+12,  4.4592512624688975e+12,  3.1000174576349883e+12,
            3.2690770088517007e+12,  3.6843774279386475e+12,  3.2851504891096147e+12,  4.1062630823684106e+12,  2.4925644387648994e+12,
            2.0398719314145625e+12,  2.3487263788184624e+12,  3.7090886263088584e+12,  2.2908367029685591e+12,  3.0475460732285894e+12,
            5.1745983204210225e+12,  4.9928664643988770e+12,  4.8130006749757480e+12,  5.5134832264040029e+12,  7.8238447824317297e+11,
            7.8238447824317297e+11,  1.3235494124913455e+12
         };
        array<double, 32> M_eff_expected = {
            4.442042245830151 , 4.442042245830151 , 4.442042245830151 , 1.5504845229406548, 4.771575680526707 , 3.802543361095668 , 0.8363084533423445,
            0.8363084533423445, 3.2686031528275867, 3.2686031528275867, 0.8363084533423445, 3.2686031528275867, 0.9206235946112362, 0.8363084533423445,
            0.8363084533423445, 0.8363084533423445, 0.8363084533423445, 0.8363084533423445, 0.8363084533423445, 3.9074809543654103, 0.8363084533423445,
            0.8363084533423445, 0.8363084533423445
        };
        array<double, 32> omega_dot_expected = {
            6.9503284992066983e+04,  1.4575551573035501e+07, -2.1321498344693515e+07, -3.9923151135650905e+03, -8.2689055848725522e+06,
           -2.1129210561393164e+04, -5.2602199405850433e+06, -4.5064938587786637e+03,  5.3072907971165217e+06, -6.2437535380791822e+04,
           -2.6045814275352294e+06,  8.5773678359357946e+03, -1.2812507073016076e+02, -5.7406676950631908e+05,  3.2631968190505129e+04,
            3.4538069129456680e+03,  2.1881083883576939e+03,  1.0512893665687687e+04,  1.8188640009816136e-02,  1.7435312868794785e+01,
            3.8383388961529329e+02,  6.2028216136163294e+00,  5.2327959158831707e-05,  1.7204946582594069e-02, -3.1740334220280361e+03,
            1.5902573106411465e+06,  3.9411401740227017e+05,  3.1650783762151565e+04,  4.0820798129857217e+03,  0.0000000000000000e+00,
            0.0000000000000000e+00, -7.4919218676327318e+06
        };
        std::copy(S.begin(), S.end(), tester.ode->S);
        std::copy(H.begin(), H.end(), tester.ode->H);


        tester.ode->production_rate(T, M, p, x.data()+3);
        ASSERT_APPROX_ARRAY(tester.ode->M_eff, M_eff_expected, tester.par->num_third_bodies, 1e-15);
        ASSERT_APPROX_ARRAY(tester.ode->omega_dot, omega_dot_expected, tester.par->num_species, 1e-12);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    const double t = 2.5275786980147761e-05;
    array<double, 36> x = {
        4.3518221660304860e-07, 8.5315176399102029e+01, 4.0621201351292711e+03, 3.1698058878988658e-06, 3.2971609996831756e-04,
        4.2195277318908103e-01, 5.0876293345883267e-07, 1.9990135807383077e-03, 2.0290893423940726e-06, 8.1401218931458834e-04,
        4.3305400747014173e-07, 2.7025496660947135e-01, 6.3310006831802919e-06, 1.0841401134656507e-05, 4.3585033688792243e-07,
        3.6096539015479591e-08, 3.2087574285830621e-04, 1.4330856257963369e-06, 1.9318462687392546e-07, 1.4263794097654005e-07,
        5.1100084010304287e-07, 2.6206650462642189e-13, 9.2524228449288033e-10, 1.9330666410172676e-08, 3.1484307465375581e-10,
        4.4345706684912898e-15, 1.1327238171479642e-12, 7.8398165287158956e-07, 7.8924704612340468e-06, 4.9461199040993478e-05,
        2.5212224167075844e-05, 2.4250653878941587e-06, 0.0000000000000000e+00, 0.0000000000000000e+00, 1.4052523544815287e-01,
        1.1439258081172209e-06
    };

    ADD_TEST(tester, "Test operator(), every option disabled",
        array<double, 36> dxdt_expected = {
            8.5315176399102029e+01,  5.7978149711418227e+13, -5.3447839223797992e+11, -1.8642711362698831e+03, -1.9391730284842651e+05,
            -2.4816484155339369e+08, -2.9922086259988629e+02, -1.1756881813517646e+06, -1.1933767642931452e+03, -4.7874837853776512e+05,
            -2.5469385669787295e+02, -1.5894617888339710e+08, -3.7234777947811358e+03, -6.3761983941107937e+03, -2.5633847356257519e+02,
            -2.1229607801127713e+01, -1.8871798680909741e+05, -8.4284661662557119e+02, -1.1361847904536961e+02, -8.3890246186587632e+01,
            -3.0053705195343474e+02, -1.5413026463965103e-04, -5.4416659758930919e-01, -1.1369025330833280e+01, -1.8516996853726211e-01,
            -2.6081225132991876e-06, -6.6619357536563755e-04, -4.6108639408909164e+02, -4.6418315174795753e+03, -2.9089820953845661e+04,
            -1.4828170385853335e+04, -1.4262638048208626e+03,  0.0000000000000000e+00,  0.0000000000000000e+00, -8.2647691886639386e+07,
            0.0000000000000000e+00
        };
        tester.ode->cpar->enable_heat_transfer = false;
        tester.ode->cpar->enable_evaporation = false;
        tester.ode->cpar->enable_reactions = false;
        tester.ode->cpar->enable_dissipated_energy = false;

        std::array<double, 32+4> dxdt;
        const bool success = tester.ode->operator()(t, (const double*)x.data(), (double*)dxdt.data());
        ASSERT_APPROX_ARRAY(dxdt, dxdt_expected, tester.par->num_species+4, 1e-10);
        ASSERT_TRUE(success);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    ADD_TEST(tester, "Test operator(), enable heat transfer",
        array<double, 36> dxdt_expected = {
            8.5315176399102029e+01,  5.7864797031323148e+13, -5.5737177012915918e+11, -1.8642711362698831e+03, -1.9391730284842651e+05,
            -2.4816484155339369e+08, -2.9922086259988629e+02, -1.1756881813517646e+06, -1.1933767642931452e+03, -4.7874837853776512e+05,
            -2.5469385669787295e+02, -1.5894617888339710e+08, -3.7234777947811358e+03, -6.3761983941107937e+03, -2.5633847356257519e+02,
            -2.1229607801127713e+01, -1.8871798680909741e+05, -8.4284661662557119e+02, -1.1361847904536961e+02, -8.3890246186587632e+01,
            -3.0053705195343474e+02, -1.5413026463965103e-04, -5.4416659758930919e-01, -1.1369025330833280e+01, -1.8516996853726211e-01,
            -2.6081225132991876e-06, -6.6619357536563755e-04, -4.6108639408909164e+02, -4.6418315174795753e+03, -2.9089820953845661e+04,
            -1.4828170385853335e+04, -1.4262638048208626e+03,  0.0000000000000000e+00,  0.0000000000000000e+00, -8.2647691886639386e+07,
            0.0000000000000000e+00
        };
        tester.ode->cpar->enable_heat_transfer = true;
        tester.ode->cpar->enable_evaporation = false;
        tester.ode->cpar->enable_reactions = false;
        tester.ode->cpar->enable_dissipated_energy = false;

        std::array<double, 32+4> dxdt;
        const bool success = tester.ode->operator()(t, (const double*)x.data(), (double*)dxdt.data());
        ASSERT_APPROX_ARRAY(dxdt, dxdt_expected, tester.par->num_species+4, 1e-10);
        ASSERT_TRUE(success);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    ADD_TEST(tester, "Test operator(), enable evaporation",
        array<double, 36> dxdt_expected = {
            8.5315176399102029e+01,  4.6071336936053664e+13, -2.9392487436518765e+12, -1.8642711362698831e+03, -1.9391730284842651e+05,
            -2.4816484155339369e+08, -2.9922086259988629e+02, -1.1756881813517646e+06, -1.1933767642931452e+03, -4.7874837853776512e+05,
            -2.5469385669787295e+02, -5.1512957386070853e+08, -3.7234777947811358e+03, -6.3761983941107937e+03, -2.5633847356257519e+02,
            -2.1229607801127713e+01, -1.8871798680909741e+05, -8.4284661662557119e+02, -1.1361847904536961e+02, -8.3890246186587632e+01,
            -3.0053705195343474e+02, -1.5413026463965103e-04, -5.4416659758930919e-01, -1.1369025330833280e+01, -1.8516996853726211e-01,
            -2.6081225132991876e-06, -6.6619357536563755e-04, -4.6108639408909164e+02, -4.6418315174795753e+03, -2.9089820953845661e+04,
            -1.4828170385853335e+04, -1.4262638048208626e+03,  0.0000000000000000e+00,  0.0000000000000000e+00, -8.2647691886639386e+07,
            0.0000000000000000e+00
        };
        tester.ode->cpar->enable_heat_transfer = true;
        tester.ode->cpar->enable_evaporation = true;
        tester.ode->cpar->enable_reactions = false;
        tester.ode->cpar->enable_dissipated_energy = false;

        std::array<double, 32+4> dxdt;
        const bool success = tester.ode->operator()(t, (const double*)x.data(), (double*)dxdt.data());
        ASSERT_APPROX_ARRAY(dxdt, dxdt_expected, tester.par->num_species+4, 1e-10);
        ASSERT_TRUE(success);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    ADD_TEST(tester, "Test operator(), enable reactions",
        array<double, 36> dxdt_expected = {
            8.5315176399102029e+01,  4.6098958693861938e+13, -2.8191064420702456e+12,  6.7639013855797093e+04,  1.4381634270187074e+07,
            -2.6948633989808720e+08, -4.2915359761649770e+03, -9.4445937662243173e+06, -2.2322587325686309e+04, -5.7389683191228081e+06,
            -4.7611877154765371e+03, -5.0982228306359202e+08, -6.6161013175572953e+04, -2.6109576259293403e+06,  8.3210293623732196e+03,
            -1.4935467853128847e+02, -7.6278475631541642e+05,  3.1789121573879558e+04,  3.3401884339002986e+03,  2.1042181421711061e+03,
            1.0212356613734251e+04,  1.8034509745176487e-02,  1.6891146271205475e+01,  3.7246486428446002e+02,  6.0176516450790674e+00,
            4.9719836645532520e-05,  1.6538753007228433e-02, -3.6351198161171278e+03,  1.5856154791236669e+06,  3.6502419644842448e+05,
            1.6822613376298228e+04,  2.6558160081648593e+03,  0.0000000000000000e+00,  0.0000000000000000e+00, -9.0139613754272118e+07,
            0.0000000000000000e+00
        };
        array<double, 32> omega_dot_expected = {
            6.9503284992066983e+04,  1.4575551573035501e+07, -2.1321498344693515e+07, -3.9923151135650905e+03, -8.2689055848725522e+06,
            -2.1129210561393164e+04, -5.2602199405850433e+06, -4.5064938587786637e+03,  5.3072907971165217e+06, -6.2437535380791822e+04,
            -2.6045814275352294e+06,  8.5773678359357946e+03, -1.2812507073016076e+02, -5.7406676950631908e+05,  3.2631968190505129e+04,
            3.4538069129456680e+03,  2.1881083883576939e+03,  1.0512893665687687e+04,  1.8188640009816136e-02,  1.7435312868794785e+01,
            3.8383388961529329e+02,  6.2028216136163294e+00,  5.2327959158831707e-05,  1.7204946582594069e-02, -3.1740334220280361e+03,
            1.5902573106411465e+06,  3.9411401740227017e+05,  3.1650783762151565e+04,  4.0820798129857217e+03,  0.0000000000000000e+00,
            0.0000000000000000e+00, -7.4919218676327318e+06
        };
        tester.ode->cpar->enable_heat_transfer = true;
        tester.ode->cpar->enable_evaporation = true;
        tester.ode->cpar->enable_reactions = true;
        tester.ode->cpar->enable_dissipated_energy = false;

        std::array<double, 32+4> dxdt;
        const bool success = tester.ode->operator()(t, (const double*)x.data(), (double*)dxdt.data());
        ASSERT_TRUE(success);
        ASSERT_APPROX_ARRAY(tester.ode->omega_dot, omega_dot_expected, tester.par->num_species, 1e-10);
        ASSERT_APPROX_ARRAY(dxdt, dxdt_expected, tester.par->num_species+4, 1e-10);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    ADD_TEST(tester, "Test operator(), enable dissipated energy",
        array<double, 36> dxdt_expected = {
            8.5315176399102029e+01,  4.6098958693861938e+13, -2.8191064420702456e+12,  6.7639013855797093e+04,  1.4381634270187074e+07,
            -2.6948633989808720e+08, -4.2915359761649770e+03, -9.4445937662243173e+06, -2.2322587325686309e+04, -5.7389683191228081e+06,
            -4.7611877154765371e+03, -5.0982228306359202e+08, -6.6161013175572953e+04, -2.6109576259293403e+06,  8.3210293623732196e+03,
            -1.4935467853128847e+02, -7.6278475631541642e+05,  3.1789121573879558e+04,  3.3401884339002986e+03,  2.1042181421711061e+03,
            1.0212356613734251e+04,  1.8034509745176487e-02,  1.6891146271205475e+01,  3.7246486428446002e+02,  6.0176516450790674e+00,
            4.9719836645532520e-05,  1.6538753007228433e-02, -3.6351198161171278e+03,  1.5856154791236669e+06,  3.6502419644842448e+05,
            1.6822613376298228e+04,  2.6558160081648593e+03,  0.0000000000000000e+00,  0.0000000000000000e+00, -9.0139613754272118e+07,
            -5.9435222771855791e+00
        };
        tester.ode->cpar->enable_heat_transfer = true;
        tester.ode->cpar->enable_evaporation = true;
        tester.ode->cpar->enable_reactions = true;
        tester.ode->cpar->enable_dissipated_energy = true;

        std::array<double, 32+4> dxdt;
        const bool success = tester.ode->operator()(t, (const double*)x.data(), (double*)dxdt.data());
        ASSERT_APPROX_ARRAY(dxdt, dxdt_expected, tester.par->num_species+4, 1e-10);
        ASSERT_TRUE(success);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0);
    );

    tester.run_tests();
}

void print_test_summary()
{
    testing::Tester::print_summary();
}

}   // namespace testing

#endif // TEST_ODE_FUN_H
#endif // TEST