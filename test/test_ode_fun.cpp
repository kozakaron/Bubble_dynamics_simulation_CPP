#ifdef TEST
#ifndef TEST_ODE_FUN_H
#define TEST_ODE_FUN_H
#include <cfloat>

#include "ode_fun.h"
#include "test.h"
#include "test_list.h"


class OdeFunTester : public testing::Tester
{
public:
    ODE *ode;
    cpar_t* cpar;

    void set_up() override
    {
        ErrorHandler::print_when_log = false;
        ErrorHandler::clear_errors();
        // Set up the ODE object
        ode = new ODE();
        cpar = ode->cpar;

        cpar->ID = 0;
        // Initial conditions:
        cpar->R_E = 10e-6;
        cpar->ratio = 1.0;
        cpar->set_species({par::index::H2, par::index::N2}, {0.75, 0.25});
        // Ambient parameters:
        cpar->P_amb = 101325.0;
        cpar->T_inf = 293.15;
        // Liquid parameters:
        cpar->alfa_M = 0.35;
        cpar->P_v = 2338.1;
        cpar->mu_L = 0.001;
        cpar->rho_L = 998.2;
        cpar->c_L = 1483.0;
        cpar->surfactant = 1.0;
        // Simulation settings:
        cpar->enable_heat_transfer = true;
        cpar->enable_evaporation = true;
        cpar->enable_reactions = true;
        cpar->enable_dissipated_energy = true;
        cpar->target_specie = par::index::NH3;
        // Excitation parameters:
        cpar->set_excitation_params({-2.0e5, 30000.0, 1.0});
        cpar->excitation_type = par::excitation::sin_impulse;
    }

    void tear_down() override
    {
        if (ErrorHandler::get_error_count() != 0) ErrorHandler::print_errors();
        ErrorHandler::clear_errors();
        delete ode;
    }
};

void test_ode_fun()
{
    OdeFunTester tester = OdeFunTester();

    ADD_TEST(tester, "test ErrorHandler",
        LOG_ERROR("Test error message", 33);
        LOG_ERROR("Another test error message", 44);
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 2)
        ASSERT_EQUAL(ErrorHandler::get_error(0).ID, 33)
        ASSERT_EQUAL(ErrorHandler::get_error(1).ID, 44)
        ASSERT_EQUAL(ErrorHandler::get_error(0).message, "Test error message")
        ErrorHandler::clear_errors();
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );

    ADD_TEST(tester, "Test long double exists",
        long double x = 1.0L;
        ASSERT_TRUE(sizeof(x) > 8)    // long double is at least 80 bits
        long double fact_200 = 1.0L;
        for (int i = 1; i <= 200; ++i)
        {
            fact_200 *= i;
        }
        ASSERT_APPROX(fact_200, 7.88657867364790503383170119245e+374L, 1e-10)
        ASSERT_APPROX(LDBL_MAX, 1.189731495357231765e+4932L, 1e-10)
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );

    ADD_TEST(tester, "Test parameter correctness",
        ASSERT_EQUAL(par::model, "chemkin_otomo2018")
        ASSERT_EQUAL(par::num_species, 32)
        ASSERT_TRUE(tester.cpar->enable_heat_transfer)
        ASSERT_TRUE(tester.cpar->enable_evaporation)
        ASSERT_TRUE(tester.cpar->enable_reactions)
        ASSERT_TRUE(tester.cpar->enable_dissipated_energy)
        ASSERT_EQUAL(tester.cpar->target_specie, par::index::NH3)
        ASSERT_EQUAL(tester.cpar->excitation_type, par::excitation::sin_impulse)
        ASSERT_EQUAL(tester.cpar->excitation_params[0], -2.0e5)
        ASSERT_EQUAL(tester.cpar->excitation_params[1], 30000.0)
        ASSERT_EQUAL(tester.cpar->excitation_params[2], 1.0)
        ASSERT_EQUAL(tester.cpar->species[0], par::index::H2)
        ASSERT_EQUAL(tester.cpar->species[1], par::index::N2)
        ASSERT_EQUAL(tester.cpar->fractions[0], 0.75)
        ASSERT_EQUAL(tester.cpar->fractions[1], 0.25)
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );

    ADD_TEST(tester, "Test ControlParameters",
        // set_species()
        tester.cpar->ID = 1;
        tester.cpar->set_species({par::index::H2, par::index::N2, par::index::NH3}, {0.5, 0.3, 0.2});
        ASSERT_EQUAL(tester.cpar->n_species, 3)
        ASSERT_EQUAL(tester.cpar->species[0], par::index::H2)
        ASSERT_EQUAL(tester.cpar->species[1], par::index::N2)
        ASSERT_EQUAL(tester.cpar->species[2], par::index::NH3)
        ASSERT_EQUAL(tester.cpar->fractions[0], 0.5)
        ASSERT_EQUAL(tester.cpar->fractions[1], 0.3)
        ASSERT_EQUAL(tester.cpar->fractions[2], 0.2)

        // set_excitation_params()
        tester.cpar->excitation_type = par::excitation::sin_impulse;
        tester.cpar->set_excitation_params({-1.0e5, 20000.0, 0.5});
        ASSERT_EQUAL(tester.cpar->excitation_params[0], -1.0e5)
        ASSERT_EQUAL(tester.cpar->excitation_params[1], 20000.0)
        ASSERT_EQUAL(tester.cpar->excitation_params[2], 0.5)

        // copy()
        cpar_t cpar;
        cpar.copy(*tester.cpar);
        ASSERT_EQUAL(cpar.ID, 1)
        ASSERT_EQUAL(cpar.n_species, 3)
        ASSERT_EQUAL(cpar.species[0], par::index::H2)
        ASSERT_EQUAL(cpar.species[1], par::index::N2)
        ASSERT_EQUAL(cpar.species[2], par::index::NH3)
        ASSERT_EQUAL(cpar.fractions[0], 0.5)
        ASSERT_EQUAL(cpar.fractions[1], 0.3)
        ASSERT_EQUAL(cpar.fractions[2], 0.2)
        ASSERT_EQUAL(cpar.excitation_type, par::excitation::sin_impulse)
        ASSERT_EQUAL(cpar.excitation_params[0], -1.0e5)
        ASSERT_EQUAL(cpar.excitation_params[1], 20000.0)
        ASSERT_EQUAL(cpar.excitation_params[2], 0.5)

        // error
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
        cpar.set_species({par::index::H2, par::index::N2}, {0.75, 0.25, 0.0});
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 1)
        cpar.excitation_type = par::excitation::no_excitation;
        cpar.set_excitation_params({-1.0e5, 20000.0, 0.5});
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 2)
        ErrorHandler::clear_errors();
    );

    ADD_TEST(tester, "Test pressure()",
        // test with IC
        double t = 0.0;
        state_t x = {
            1.00000000e-05, 0.00000000e+00, 2.93150000e+02, 0.00000000e+00,
            0.00000000e+00, 3.48880918e-05, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 9.59266184e-07,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 0.00000000e+00, 0.00000000e+00,
            0.00000000e+00, 0.00000000e+00, 1.16293639e-05, 0.00000000e+00
        };
        double p=115718.99999999997, p_dot=1.4057234685268682e-05;
        std::copy(x.begin(), x.end(), tester.ode->x);
        auto result = tester.ode->pressures(t, p, p_dot);
        ASSERT_NEAR(result.first, -2.915631181800611e-14, 1e-30)
        ASSERT_NEAR(result.second, 37767092.609775126, 1e-30)

        // test mid solution

        t = 2.5275784545984945e-05;
        x = {
            4.35062207e-07, 4.87202821e+00, 4.06585821e+03, 3.04892226e-06,
            3.05074849e-04, 4.22341571e-01, 5.15008532e-07, 2.01019027e-03,
            2.06121865e-06, 8.22242270e-04, 4.39352481e-07, 2.71009207e-01,
            6.41710788e-06, 1.01692955e-05, 4.20519003e-07, 3.61935060e-08,
            3.20915772e-04, 1.37025184e-06, 1.86821312e-07, 1.38126629e-07,
            4.92327628e-07, 2.32080892e-13, 8.92888443e-10, 1.86215771e-08,
            3.03803895e-10, 4.31461142e-15, 1.09808740e-12, 7.88255393e-07,
            7.70016174e-06, 4.84341261e-05, 2.50989113e-05, 2.41829246e-06,
            0.00000000e+00, 0.00000000e+00, 1.40656155e-01, 1.14395306e-06
        };
        p=28314574645.141563; p_dot=-1.7925548921224659e+19;
        std::copy(x.begin(), x.end(), tester.ode->x);
        result = tester.ode->pressures(t, p, p_dot);
        ASSERT_APPROX(result.first, 28364954.865982585, 1e-10)
        ASSERT_APPROX(result.second, -1.795787629998652e+16, 1e-10)
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );

    ADD_TEST(tester, "Test thermodynamic()",
        double T = 500.0;
        array<double, 32> C_p = {
            3.04749584e+08, 3.98372897e+08, 2.93844970e+08, 3.10540972e+08,
            2.07861500e+08, 2.12325951e+08, 2.94806555e+08, 3.95042227e+08,
            3.52234530e+08, 5.00665292e+08, 3.55741774e+08, 2.92925387e+08,
            2.07890225e+08, 3.80592014e+08, 5.94533321e+08, 4.64992794e+08,
            4.72020385e+08, 3.76077362e+08, 3.97928476e+08, 4.35145288e+08,
            5.64867934e+08, 4.86602373e+08, 6.22259081e+08, 7.19364030e+08,
            4.58656284e+08, 7.04202000e+08, 5.76706000e+08, 4.56167565e+08,
            4.35346018e+08, 2.07861500e+08, 2.07861500e+08, 2.96107554e+08
        };
        array<double, 32> H = {
            9.73295957e+11, -3.80922138e+11,  5.90010679e+10,  6.08461476e+10,
            2.22192802e+12,  2.53513155e+12,  4.32768823e+11,  1.97967470e+11,
            -2.34899219e+12, -1.26531973e+12,  1.95766188e+12,  3.64686642e+12,
            4.76872997e+12,  2.57095570e+12, -3.32079171e+11,  7.33780636e+11,
            1.09530331e+12,  1.14017686e+12,  2.22051527e+12,  4.23447652e+11,
            -6.82614167e+11, -3.22520386e+11,  8.57643211e+11, -1.21183376e+12,
            9.01839413e+11,  1.07740812e+12,  1.64239312e+12,  2.21289857e+12,
            2.96323877e+12,  4.19568438e+10,  4.19568438e+10,  5.91524677e+10
         };
        array<double, 32> S = {
            2.26257659e+09, 2.11502428e+09, 1.45780595e+09, 2.20695806e+09,
            1.25463849e+09, 1.72189819e+09, 1.99054918e+09, 2.48213733e+09,
            2.06529964e+09, 2.58311658e+09, 2.12669085e+09, 1.96327388e+09,
            1.64048179e+09, 2.43089142e+09, 2.63404624e+09, 2.51455538e+09,
            2.55417135e+09, 2.39216437e+09, 2.50143418e+09, 2.60907964e+09,
            2.80578462e+09, 2.59563221e+09, 2.80805549e+09, 2.99337033e+09,
            2.41835259e+09, 2.69893140e+09, 2.54674266e+09, 2.39544667e+09,
            2.43267218e+09, 1.65592408e+09, 1.36899614e+09, 2.06749107e+09
        };
        array<double, 32> C_v = {
            2.21604984e+08, 3.15228297e+08, 2.10700370e+08, 2.27396372e+08,
            1.24716900e+08, 1.29181351e+08, 2.11661955e+08, 3.11897627e+08,
            2.69089930e+08, 4.17520692e+08, 2.72597174e+08, 2.09780787e+08,
            1.24745625e+08, 2.97447414e+08, 5.11388721e+08, 3.81848194e+08,
            3.88875785e+08, 2.92932762e+08, 3.14783876e+08, 3.52000688e+08,
            4.81723334e+08, 4.03457773e+08, 5.39114481e+08, 6.36219430e+08,
            3.75511684e+08, 6.21057400e+08, 4.93561400e+08, 3.73022965e+08,
            3.52201418e+08, 1.24716900e+08, 1.24716900e+08, 2.12962954e+08
        };

        tester.ode->thermodynamic(T);
        ASSERT_APPROX_ARRAY(tester.ode->C_p, C_p, par::num_species, 1e-8)
        ASSERT_APPROX_ARRAY(tester.ode->H,   H,   par::num_species, 1e-8)
        ASSERT_APPROX_ARRAY(tester.ode->S,   S,   par::num_species, 1e-8)
        ASSERT_APPROX_ARRAY(tester.ode->C_v, C_v, par::num_species, 1e-8)

        T = 2000.0;
        C_p = {
            3.67274834e+08, 7.07911759e+08, 3.41951440e+08, 3.78552871e+08,
            2.07861500e+08, 2.08211454e+08, 3.47141000e+08, 5.57740375e+08,
            5.16784485e+08, 7.39641478e+08, 5.25319169e+08, 3.56110421e+08,
            2.07766866e+08, 5.43963351e+08, 9.96883719e+08, 7.28419181e+08,
            7.45171771e+08, 6.14654196e+08, 5.38536662e+08, 5.82751781e+08,
            7.80015862e+08, 7.70799517e+08, 8.15494804e+08, 1.00738550e+09,
            6.12504775e+08, 1.18335311e+09, 9.69156073e+08, 7.52611047e+08,
            7.38239407e+08, 2.07861500e+08, 2.07861500e+08, 3.60094114e+08
        };
        H = {
            1.49104901e+12,  4.93245178e+11,  5.29593617e+11,  5.91769247e+11,
            2.53372027e+12,  2.84892868e+12,  9.11142535e+11,  9.39291901e+11,
            -1.68773282e+12, -2.89314124e+11,  2.63560491e+12,  4.13382169e+12,
            5.08061855e+12,  3.30003767e+12,  9.37425630e+11,  1.68090824e+12,
            2.06622656e+12,  1.90756203e+12,  2.95477356e+12,  1.22962578e+12,
            3.82155790e+11,  6.98186937e+11,  2.01129649e+12,  1.81009007e+11,
            1.74568473e+12,  2.59563626e+12,  2.88706665e+12,  3.18542599e+12,
            3.90183183e+12,  3.53749094e+11,  3.53749094e+11,  5.60873679e+11
         };
        S = {
            2.73102226e+09, 2.87260006e+09, 1.88444725e+09, 2.68746713e+09,
            1.54279572e+09, 2.01250380e+09, 2.42364025e+09, 3.14250484e+09,
            2.64930299e+09, 3.44806961e+09, 2.72511761e+09, 2.40259054e+09,
            1.92871174e+09, 3.07861766e+09, 3.74346034e+09, 3.34774678e+09,
            3.40912848e+09, 3.06346496e+09, 3.15855827e+09, 3.33245415e+09,
            3.75731862e+09, 3.49422334e+09, 3.84783490e+09, 4.23876278e+09,
            3.17471821e+09, 4.02726081e+09, 3.63588548e+09, 3.24694169e+09,
            3.25115991e+09, 1.94408131e+09, 1.65715337e+09, 2.52040548e+09
        };
        C_v = {
            2.84130234e+08, 6.24767159e+08, 2.58806840e+08, 2.95408271e+08,
            1.24716900e+08, 1.25066854e+08, 2.63996400e+08, 4.74595775e+08,
            4.33639885e+08, 6.56496878e+08, 4.42174569e+08, 2.72965821e+08,
            1.24622266e+08, 4.60818751e+08, 9.13739119e+08, 6.45274581e+08,
            6.62027171e+08, 5.31509596e+08, 4.55392062e+08, 4.99607181e+08,
            6.96871262e+08, 6.87654917e+08, 7.32350204e+08, 9.24240899e+08,
            5.29360175e+08, 1.10020851e+09, 8.86011473e+08, 6.69466447e+08,
            6.55094807e+08, 1.24716900e+08, 1.24716900e+08, 2.76949514e+08
        };

        tester.ode->thermodynamic(T);
        ASSERT_APPROX_ARRAY(tester.ode->C_p, C_p, par::num_species, 1e-8)
        ASSERT_APPROX_ARRAY(tester.ode->H,   H,   par::num_species, 1e-8)
        ASSERT_APPROX_ARRAY(tester.ode->S,   S,   par::num_species, 1e-8)
        ASSERT_APPROX_ARRAY(tester.ode->C_v, C_v, par::num_species, 1e-8)
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );

    ADD_TEST(tester, "Test evaporation()",
        FAIL("Not implemented yet.")
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );

    ADD_TEST(tester, "Test forward_rate()",
        double T = 4062.120135129271;
        double M = 0.8363084533423445;
        double p = 28245762183.248737;
        array<double, par::num_third_bodies> M_eff = {
            4.44204225, 4.44204225, 4.44204225, 1.55048452, 4.77157568,
            3.80254336, 0.83630845, 0.83630845, 3.26860315, 3.26860315,
            0.83630845, 3.26860315, 0.92062359, 0.83630845, 0.83630845,
            0.83630845, 0.83630845, 0.83630845, 0.83630845, 3.90748095,
            0.83630845, 0.83630845, 0.83630845
        };
        array<double, par::num_reactions> expected = {
            1.50522106e+13,  1.41962776e+12,  8.18184924e+13,  4.04671348e+13,
            2.01417425e+13, -3.00280120e+12,  9.88033752e+08,  1.50684219e+09,
            1.15703127e+15,  2.37109804e+13,  1.98814983e+09,  5.38834889e+10,
            1.06853341e+14,  1.16819766e+14,  6.84521510e+13,  1.40000000e+12,
            1.28855385e+14,  1.85499710e+11,  4.24734857e+13,  9.12930925e+11,
            6.03337846e+12,  4.92817624e+12,  1.46764793e+13,  1.79276977e+13,
            9.68695775e+13,  1.63433188e+12,  3.08802957e+13,  2.05900649e+11,
            7.65403926e+13,  4.23208866e+13,  4.28977343e+13,  1.96563406e+10,
            2.13461490e+14,  6.60000000e+13,  7.00000000e+12,  2.06817945e+14,
            3.66140575e+13,  5.18753921e+09,  5.00000000e+13,  1.44773328e+09,
            4.74279729e+11,  3.87425835e+09,  4.07608425e+11,  1.16781765e+11,
            2.86673280e+13,  7.14572569e+12,  7.00000000e+13,  3.20494485e+12,
            4.00868931e+11, -4.96221264e+11,  5.31866122e+11,  1.03625793e+13,
            3.04590714e+10,  1.43294405e+12,  1.00000000e+14,  9.20000000e+13,
            1.41492617e+13,  3.08374038e+13,  3.39279693e+12,  3.32424032e+11,
            5.48827278e+13,  3.00000000e+13,  1.80081417e+13,  1.58022425e+12,
            1.00000000e+13,  4.10000000e+12,  5.90000000e+12,  3.80000000e+13,
            1.19416251e+13,  3.00852234e+13,  1.00000000e+09,  1.00000000e+14,
            1.95496489e+13,  4.11268247e+13,  1.29700811e+13,  5.00000000e+13,
            2.28832457e+13,  5.00000000e+13,  5.00000000e+13,  5.00000000e+13,
            2.69408379e+11,  5.73018842e+13,  3.31689334e+13,  5.29301128e+13,
            3.03136005e+13,  6.09859171e+13,  2.97696312e+13,  3.03125464e+13,
            2.36678229e+13,  1.80619916e+13,  4.42527967e+13,  4.52655975e+13,
            3.22388207e+13,  5.51957793e+10,  1.73438081e+12,  7.20208888e+08,
            3.86389300e+14,  5.00000000e+13,  3.86389300e+14,  1.00000000e+14,
            1.80311856e+14,  1.41090458e+12,  2.65045485e+12,  6.59362949e+10,
            4.68327393e+11,  7.61155096e+10,  4.00000000e+13,  1.18586066e+14,
            7.00000000e+13,  8.93107605e+13,  4.59036665e+13,  1.80311856e+14,
            1.80311856e+14,  1.35550191e+11,  2.08080527e+13,  4.68327393e+11,
            4.55306770e+13,  1.60010680e+14,  1.00000000e+13,  3.60000000e+13,
            2.75560192e+12,  2.12614496e+12,  8.97851595e+13,  2.23335785e+12,
            2.35180108e+12,  3.97473641e-01,  1.24298946e+14,  1.46164279e+12,
            1.24750704e+12,  5.95933774e+12,  7.20812540e+10,  3.10615478e+11,
            5.91492593e+08,  8.08292434e+12,  2.96790386e+12,  1.80000000e+12,
            3.82570236e+13,  3.32578744e+13,  5.73493118e+12,  5.19317552e+13,
            3.48130737e+09,  1.06361841e+12,  4.35761418e+12,  3.30868551e+13,
            3.02760710e+13,  2.13182758e+13,  5.92631886e+12,  6.00000000e+13,
            1.00000000e+13,  1.40000000e+13,  1.50000000e+12,  3.47372569e+10,
            1.62909955e+13,  1.90100525e+13,  2.27026025e+13,  3.19595208e+13,
            1.16603892e+10,  7.53915251e+07,  1.76190178e+10,  7.08864751e+13,
            2.98286943e+12,  5.13844203e+11,  1.40927648e+10,  7.98377024e+10,
            7.81513202e+12,  1.91377745e+11,  8.53055355e+11,  1.89426784e+11,
            1.47310144e+11,  2.35350366e+13,  3.24645626e+13,  9.70843769e+12,
            7.34341654e+12,  5.13565603e+12,  3.39410342e+11,  1.75557073e+11,  // 7.34341654e+12 changed from 16036989500000.0, since reference code is faulty
            1.35223453e+13,  3.23864495e+12,  3.93948092e+07,  6.22126062e+13,
            4.76796888e+13,  3.00000000e+13,  3.00000000e+13,  2.29518332e+13,
            3.00000000e+13,  1.55950700e+11,  8.70471027e+13,  7.08577882e+12,
            1.06352269e+13,  3.00000000e+13,  2.00000000e+13,  1.02638793e+07,
            2.55896590e+14,  8.03348644e+13,  1.00000000e+13,  9.27774129e+13,
            2.97380169e+13,  4.59036665e+13,  9.13369109e+11,  6.35942089e+06,
            1.82679308e+07,  1.38825210e+14,  7.00000000e+13,  9.54423315e+13,
            7.00000000e+13,  4.59036665e+13,  2.00000000e+12,  9.00000000e+12,
            1.80311856e+14,  7.16777597e+11,  2.08080527e+13,  1.27797369e+03,
            4.12254886e+14
        };
        std::copy(M_eff.begin(), M_eff.end(), tester.ode->M_eff);
        
        tester.ode->forward_rate(T, M, p);
        ASSERT_APPROX_ARRAY(tester.ode->k_forward, expected, par::num_reactions, 1e-8)
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );


    ADD_TEST(tester, "Test backward_rate()",
        double T = 4062.120135129271;
        array<double, par::num_reactions> k_forward = {
            1.50522106e+13,  1.41962776e+12,  8.18184924e+13,  4.04671348e+13,
            2.01417425e+13, -3.00280120e+12,  9.88033752e+08,  1.50684219e+09,
            1.15703127e+15,  2.37109804e+13,  1.98814983e+09,  5.38834889e+10,
            1.06853341e+14,  1.16819766e+14,  6.84521510e+13,  1.40000000e+12,
            1.28855385e+14,  1.85499710e+11,  4.24734857e+13,  9.12930925e+11,
            6.03337846e+12,  4.92817624e+12,  1.46764793e+13,  1.79276977e+13,
            9.68695775e+13,  1.63433188e+12,  3.08802957e+13,  2.05900649e+11,
            7.65403926e+13,  4.23208866e+13,  4.28977343e+13,  1.96563406e+10,
            2.13461490e+14,  6.60000000e+13,  7.00000000e+12,  2.06817945e+14,
            3.66140575e+13,  5.18753921e+09,  5.00000000e+13,  1.44773328e+09,
            4.74279729e+11,  3.87425835e+09,  4.07608425e+11,  1.16781765e+11,
            2.86673280e+13,  7.14572569e+12,  7.00000000e+13,  3.20494485e+12,
            4.00868931e+11, -4.96221264e+11,  5.31866122e+11,  1.03625793e+13,
            3.04590714e+10,  1.43294405e+12,  1.00000000e+14,  9.20000000e+13,
            1.41492617e+13,  3.08374038e+13,  3.39279693e+12,  3.32424032e+11,
            5.48827278e+13,  3.00000000e+13,  1.80081417e+13,  1.58022425e+12,
            1.00000000e+13,  4.10000000e+12,  5.90000000e+12,  3.80000000e+13,
            1.19416251e+13,  3.00852234e+13,  1.00000000e+09,  1.00000000e+14,
            1.95496489e+13,  4.11268247e+13,  1.29700811e+13,  5.00000000e+13,
            2.28832457e+13,  5.00000000e+13,  5.00000000e+13,  5.00000000e+13,
            2.69408379e+11,  5.73018842e+13,  3.31689334e+13,  5.29301128e+13,
            3.03136005e+13,  6.09859171e+13,  2.97696312e+13,  3.03125464e+13,
            2.36678229e+13,  1.80619916e+13,  4.42527967e+13,  4.52655975e+13,
            3.22388207e+13,  5.51957793e+10,  1.73438081e+12,  7.20208888e+08,
            3.86389300e+14,  5.00000000e+13,  3.86389300e+14,  1.00000000e+14,
            1.80311856e+14,  1.41090458e+12,  2.65045485e+12,  6.59362949e+10,
            4.68327393e+11,  7.61155096e+10,  4.00000000e+13,  1.18586066e+14,
            7.00000000e+13,  8.93107605e+13,  4.59036665e+13,  1.80311856e+14,
            1.80311856e+14,  1.35550191e+11,  2.08080527e+13,  4.68327393e+11,
            4.55306770e+13,  1.60010680e+14,  1.00000000e+13,  3.60000000e+13,
            2.75560192e+12,  2.12614496e+12,  8.97851595e+13,  2.23335785e+12,
            2.35180108e+12,  3.97473641e-01,  1.24298946e+14,  1.46164279e+12,
            1.24750704e+12,  5.95933774e+12,  7.20812540e+10,  3.10615478e+11,
            5.91492593e+08,  8.08292434e+12,  2.96790386e+12,  1.80000000e+12,
            3.82570236e+13,  3.32578744e+13,  5.73493118e+12,  5.19317552e+13,
            3.48130737e+09,  1.06361841e+12,  4.35761418e+12,  3.30868551e+13,
            3.02760710e+13,  2.13182758e+13,  5.92631886e+12,  6.00000000e+13,
            1.00000000e+13,  1.40000000e+13,  1.50000000e+12,  3.47372569e+10,
            1.62909955e+13,  1.90100525e+13,  2.27026025e+13,  3.19595208e+13,
            1.16603892e+10,  7.53915251e+07,  1.76190178e+10,  7.08864751e+13,
            2.98286943e+12,  5.13844203e+11,  1.40927648e+10,  7.98377024e+10,
            7.81513202e+12,  1.91377745e+11,  8.53055355e+11,  1.89426784e+11,
            1.47310144e+11,  2.35350366e+13,  3.24645626e+13,  9.70843769e+12,
            1.60369895e+13,  5.13565603e+12,  3.39410342e+11,  1.75557073e+11,
            1.35223453e+13,  3.23864495e+12,  3.93948092e+07,  6.22126062e+13,
            4.76796888e+13,  3.00000000e+13,  3.00000000e+13,  2.29518332e+13,
            3.00000000e+13,  1.55950700e+11,  8.70471027e+13,  7.08577882e+12,
            1.06352269e+13,  3.00000000e+13,  2.00000000e+13,  1.02638793e+07,
            2.55896590e+14,  8.03348644e+13,  1.00000000e+13,  9.27774129e+13,
            2.97380169e+13,  4.59036665e+13,  9.13369109e+11,  6.35942089e+06,
            1.82679308e+07,  1.38825210e+14,  7.00000000e+13,  9.54423315e+13,
            7.00000000e+13,  4.59036665e+13,  2.00000000e+12,  9.00000000e+12,
            1.80311856e+14,  7.16777597e+11,  2.08080527e+13,  1.27797369e+03,
            4.12254886e+14
        };

        array<double, par::num_species> S = {
            2.99644475e+09, 3.41074999e+09, 2.14441329e+09, 2.96907458e+09,
            1.69007762e+09, 2.16104665e+09, 2.68386600e+09, 3.56366935e+09,
            3.04640940e+09, 4.00159264e+09, 3.12497568e+09, 2.67269556e+09,
            2.07777482e+09, 3.47594098e+09, 4.48376692e+09, 3.89052273e+09,
            3.96277693e+09, 3.53397408e+09, 3.55302817e+09, 3.76398886e+09,
            4.32555950e+09, 4.05962574e+09, 4.43088303e+09, 4.96300238e+09,
            3.62084054e+09, 4.90925925e+09, 4.35643109e+09, 3.80396742e+09,
            3.80239403e+09, 2.09136320e+09, 1.80443527e+09, 2.78188340e+09
        };

        array<double, par::num_species> H = {
            2.26496083e+12,  2.06943718e+12,  1.29230265e+12,  1.41607261e+12,
            2.96235566e+12,  3.28182436e+12,  1.67319046e+12,  2.17261817e+12,
            -5.22668418e+11,  1.33045520e+12,  3.80852183e+12,  4.92634054e+12,
            5.51566357e+12,  4.45925126e+12,  3.10001746e+12,  3.26907701e+12,
            3.68437743e+12,  3.28515049e+12,  4.10626308e+12,  2.49256444e+12,
            2.03987193e+12,  2.34872638e+12,  3.70908863e+12,  2.29083670e+12,
            3.04754607e+12,  5.17459832e+12,  4.99286646e+12,  4.81300067e+12,
            5.51348323e+12,  7.82384478e+11,  7.82384478e+11,  1.32354941e+12
         };
        
        array<double, par::num_reactions> expected = {
            8.88632077e+12,  7.47199085e+11,  4.30638964e+13,  2.57304975e+13,
            2.43321742e+13, -3.62752538e+12,  1.04614931e+14,  1.59547375e+14,
            5.75155203e+09,  1.99649290e+08,  3.31074150e+14,  8.97288023e+15,
            2.46396951e+11,  4.78461742e+11,  8.71167236e+10,  2.15241668e+09,
            2.77776376e+11,  4.83080879e+08,  1.10610032e+11,  5.28514199e+10,
            3.49284496e+11,  4.69823461e+13,  8.40222282e+08,  1.26834285e+12,
            3.60712672e+12,  7.35187519e+10,  1.38911859e+12,  3.52199028e+15,
            1.23651455e+13,  3.59853020e+12,  4.40644779e+12,  4.48847768e+10,
            4.05957366e+13,  1.14671436e+13,  7.00681707e+11,  2.07019358e+13,
            4.42745827e+12,  1.31517556e+08,  9.11834117e+12,  3.86721384e+05,
            1.26690541e+08,  9.35872884e+06,  3.44823020e+13,  1.19786549e+10,
            3.37473410e+13,  9.78104168e+12,  4.87399951e+11,  1.87394558e+10,
            2.26061943e+06, -2.79833967e+06,  3.99125178e+11,  6.33749573e+12,
            6.11074816e+06,  1.51472943e+11,  2.21129821e+13,  7.93931826e+10,
            2.45596603e+13,  4.33581608e+12,  3.47670741e+12,  1.69359474e+08,
            6.38149030e+13,  1.03735144e+07,  4.05009842e+13,  7.36948539e+07,
            5.19514255e+12,  6.80228722e+09,  7.55466166e+09,  2.81753822e+11,
            5.22722690e+10,  1.20548696e+10,  1.25139503e+09,  1.18187769e+09,
            5.86477807e+12,  2.55834767e+08,  1.73004992e+12,  3.75740723e+08,
            6.60327331e+10,  3.10728900e+09,  3.65791822e+09,  6.25601209e+11,
            1.24304528e+13,  5.13177002e+12,  2.07117534e+12,  2.49495635e+12,
            9.96287617e+11,  3.47275040e+12,  1.18196480e+12,  1.68039800e+13,
            9.14818894e+12,  8.50556225e+12,  1.45299859e+13,  5.72999701e+13,
            2.84545919e+13,  1.34631234e+13,  2.48746731e+12,  1.65937061e+08,
            8.90108931e+11,  3.48930237e+11,  4.68495051e+11,  1.46475097e+11,
            5.87124503e+12,  7.93569238e+11,  3.77946155e+10,  1.60804296e+11,
            1.09196639e+10,  1.29449446e+13,  1.94632638e+11,  1.90475362e+11,
            5.91786473e+10,  7.55041427e+10,  4.68811491e+10,  4.09371197e+12,
            8.24625737e+12,  5.31587051e+10,  2.06884540e+11,  7.61371028e+09,
            4.55236691e+11,  1.51145050e+11,  4.97172167e+09,  2.16218668e+10,
            6.35521946e+11,  1.65459482e+09,  8.58402865e+11,  3.85299387e+12,
            1.58476953e+10,  4.55301557e-01,  9.16942025e+10,  1.82639193e+09,
            5.17148810e+10,  1.51003254e+13,  1.33662487e+10,  1.94795491e+13,
            1.92620868e+09,  1.04740305e+12,  3.00394150e+13,  2.56586882e+10,
            2.95188212e+12,  1.54124971e+09,  2.98228002e+11,  3.26239910e+12,
            1.78380694e+10,  5.15637642e+11,  7.12907191e+10,  5.34808212e+10,
            2.57575139e+10,  2.19098993e+10,  2.50441531e+12,  7.05780856e+08,
            1.99249355e+08,  1.29399389e+11,  7.65178324e+09,  1.02713356e+08,
            1.08167906e+13,  2.29875138e+13,  2.05328239e+08,  4.60117986e+09,
            8.96535439e+09,  3.14488184e+08,  3.65345242e+05,  1.46989104e+09,
            1.14454521e+09,  1.80481014e+07,  2.29616732e+08,  1.03446579e+11,
            3.33836611e+10,  5.37946102e+09,  1.31155104e+05,  8.10496342e+10,
            5.11082613e+11,  5.29497192e+13,  4.96677123e+12,  1.04209954e+11,
            3.50352093e+11,  6.98073399e+10,  3.37046706e+10,  1.25598757e+09,
            1.16869964e+11,  2.72495889e+11,  5.67625167e+10,  8.46601718e+11,
            3.41504171e+11,  1.65776760e+11,  0.00000000e+00,  1.98592964e+11,
            2.10482751e+12,  1.01348967e+10,  1.67433720e+13,  2.13507589e+12,
            8.95857566e+11,  2.04909567e+13,  1.43109959e+12,  5.94326333e+08,
            1.39944568e+11,  2.31237072e+10,  3.83571738e+09,  3.22611269e+10,
            1.00668826e+11,  1.32001247e+11,  9.13049269e+11,  4.54132131e+07,
            1.30452984e+08,  9.36291559e+09,  8.63275196e+12,  3.38801761e+09,
            3.31127967e+09,  1.96850206e+09,  0.00000000e+00,  0.00000000e+00,
            1.71891701e+11,  2.71349806e+10,  8.68691683e+09,  8.65339363e+13,
            1.51946951e+07
        };
        std::copy(k_forward.begin(), k_forward.end(), tester.ode->k_forward);
        std::copy(S.begin(), S.end(), tester.ode->S);
        std::copy(H.begin(), H.end(), tester.ode->H);

        tester.ode->backward_rate(T);
        ASSERT_APPROX_ARRAY(tester.ode->k_backward, expected, par::num_reactions, 1e-6)
        ASSERT_EQUAL(ErrorHandler::get_error_count(), 0)
    );
        

    tester.run_tests();
}


#endif // TEST_ODE_FUN_H
#endif // TEST